import{_ as i,r as c,o as l,c as u,a as n,b as s,w as e,d as a,e as p}from"./app.32c1406f.js";const r={},d=n("h1",null,"OCA Validator",-1),k=n("p",null,[n("strong",null,"OCA Validator"),a(" enables entry (or an array of entries) verification against predefined rules, given by the "),n("a",{href:"/ecosystem/oca-bundle"}," OCA Bundle "),a(". The verification executed on an entry, that is a map of key-value pairs, encompasses:")],-1),v=a("type checking, so whether a value matches the expected type (defined in "),m=a("Capture Base"),_=a(") or can be implicitly coerced to it;"),h=a("task (overlay) specific verification, including: "),b=a(" character encoding overlay "),f=a(" format overlay "),y=a(" cardinality overlay "),g=a(" conformance overlay "),x=a(" entry code overlay "),q=p(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[dependencies]
oca_conductor = &quot;0.2.6&quot;
oca_zip_resolver = &quot;0.2.6&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript-and-javascript-node-js-based" tabindex="-1"><a class="header-anchor" href="#typescript-and-javascript-node-js-based" aria-hidden="true">#</a> Typescript and JavaScript (Node.JS based)</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i oca-data-validator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="rust-1" tabindex="-1"><a class="header-anchor" href="#rust-1" aria-hidden="true">#</a> Rust</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span>data_set<span class="token punctuation">::</span></span><span class="token class-name">DataSet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span>data_set<span class="token punctuation">::</span></span><span class="token class-name">JSONDataSet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">oca_conductor<span class="token punctuation">::</span></span><span class="token class-name">Validator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">oca_zip_resolver<span class="token punctuation">::</span></span>resolve_from_zip<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oca_result <span class="token operator">=</span> <span class="token function">resolve_from_zip</span><span class="token punctuation">(</span><span class="token string">&quot;oca_bundle.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> validator <span class="token operator">=</span> <span class="token class-name">Validator</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>oca_result<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    validator<span class="token punctuation">.</span><span class="token function">add_data_set</span><span class="token punctuation">(</span><span class="token class-name">JSONDataSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
        <span class="token string">r#&quot;{ &quot;email&quot;: &quot;test@example.com&quot;, &quot;licensess&quot;: [&quot;A&quot;] }&quot;#</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> validation_result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> validation_result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ok(())</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),w=a("See also "),S={href:"https://github.com/THCLab/oca-conductor/blob/main/conductor/src/validator/mod.rs",target:"_blank",rel:"noopener noreferrer"},V=a(" tests "),j=a(" available for "),C=n("code",null,"validator",-1),N=a(" module."),z=p(`<h3 id="typescript-and-javascript-node-js-based-1" tabindex="-1"><a class="header-anchor" href="#typescript-and-javascript-node-js-based-1" aria-hidden="true">#</a> Typescript and JavaScript (Node.JS based)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveFromZip<span class="token punctuation">,</span> Validator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;oca-data-validator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> oca <span class="token operator">=</span> <span class="token function">resolveFromZip</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oca_bundle.zip</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span>oca<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&#39;email&#39;</span><span class="token operator">:</span> <span class="token string">&#39;test@example.com&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;licenses&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),J=a("See also "),L={href:"https://github.com/THCLab/oca-conductor/tree/main/bindings/node.js/pkg/validator/test",target:"_blank",rel:"noopener noreferrer"},O=a("here"),T=a(" for more integration tests.");function A(B,R){const t=c("RouterLink"),o=c("ExternalLinkIcon");return l(),u("div",null,[d,k,n("ul",null,[n("li",null,[v,s(t,{to:"/specification/#capture-base"},{default:e(()=>[m]),_:1}),_]),n("li",null,[h,n("ul",null,[n("li",null,[s(t,{to:"/specification/#character-encoding-overlay"},{default:e(()=>[b]),_:1})]),n("li",null,[s(t,{to:"/specification/#format-overlay"},{default:e(()=>[f]),_:1})]),n("li",null,[s(t,{to:"/specification/#cardinality-overlay"},{default:e(()=>[y]),_:1})]),n("li",null,[s(t,{to:"/specification/#conformance-overlay"},{default:e(()=>[g]),_:1})]),n("li",null,[s(t,{to:"/specification/#entry-code-overlay"},{default:e(()=>[x]),_:1})])])])]),q,n("p",null,[w,n("a",S,[V,s(o)]),j,C,N]),z,n("p",null,[J,n("a",L,[O,s(o)]),T])])}var E=i(r,[["render",A],["__file","oca-validator.html.vue"]]);export{E as default};
